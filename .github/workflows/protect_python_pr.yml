name: Protect Python PR

on:
  pull_request:
    branches: ["main"]

  # allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      # checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # install python on compute
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      # install third-party libs
      - name: Install Testing and Formatting Libs
        run: |
          pip install black
          pip install pytest
          pip install pytest-cov
          echo Installed black lib...

      - name: Check Formatting With Black
        run: black --check ./

      - name: Set status check
        id: status-check
        run: echo "::set-output name=status::$(black --check ./ && echo 'pass' || echo 'fail')"

      - name: Report status (check Fail)
        needs: status-check
        if: ${{ needs.status-check.outputs.status == 'fail' }}
        run: echo "Black formatting check failed. Please format your code using Black."

      - name: Report status (check Pass)
        needs: status-check
        if: ${{ needs.status-check.outputs.status == 'pass' }}
        run: echo "Black formatting check passed."

  test:
    runs-on: ubuntu-latest
    steps:
      # checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # install python on compute
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      # install third-party libs
      - name: Install Testing and Formatting Libs
        run: |
          pip install pytest
          pip install pytest-cov
          echo Installed pytest and pytest-cov libs...

      - name: Check all test cases are passing
        run: pytest ./pytest_example.py
    
      - name: Set status check
        id: status-check
        run: echo "::set-output name=status::$(pytest ./pytest_example.py && echo 'pass' || echo 'fail')"

      - name: Report status (check Fail)
        needs: status-check
        if: ${{ needs.status-check.outputs.status == 'fail' }}
        run: echo "Pytest formatting check failed. Please ensure all test cases are passing."

      - name: Report status (check Pass)
        needs: status-check
        if: ${{ needs.status-check.outputs.status == 'pass' }}
        run: echo "Pytest check passed."
